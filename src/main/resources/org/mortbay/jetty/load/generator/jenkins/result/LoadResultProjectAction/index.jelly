<?xml version="1.0" encoding="UTF-8"?>
<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form"
         xmlns:m="/org/mortbay/jetty/load/generator/jenkins/tags">
  <l:layout title="Load Generator">
    <m:import/>
    <l:main-panel>
      <div>
        Jetty Version:
        <select id="jettyVersions" multiple="multiple">
          <j:forEach var="jettyVersion" items="${it.getJettyVersions()}">
            <option value="${jettyVersion.key}">${jettyVersion.key}</option>
          </j:forEach>
        </select>
      </div>
      <div>
        Transport:
        <select id="transport">
          <option value="http" selected="true">http</option>
          <option value="h2c">h2c</option>
        </select>
      </div>
      <div>
        Estimated QPS (number of results):
        <select id="estimatedQpsSelect">
        </select>
      </div>

      <h2>Global Reponse Time Result</h2>
      <div class="graph-container floating-box-load-result-time" align="right">
        <div id="load_result_response_time_trend" class="graph" style="width: 85%;height: 170px">
        </div>
        <script type="text/javascript" language="javascript">
          jQueryLoadGenerator.noConflict();
          <!--jQueryLoadGenerator("#estimatedQpsSelect").select2({-->
            <!--theme: "classic"-->
          <!--});-->

          jQueryLoadGenerator("#jettyVersions").select2({ theme: "classic" });

          function updateQpsSelect(qpsValues) {
            var $el = jQueryLoadGenerator("#estimatedQpsSelect");
            $el.empty(); // remove old options
            //jQueryLoadGenerator("#estimatedQpsSelect").val(null).trigger('change');
            jQueryLoadGenerator.each(qpsValues, function(key,value) {
              $el.append(jQueryLoadGenerator("<option></option>").attr("value", key).text(key+":"+value));
              //jQueryLoadGenerator("#estimatedQpsSelect").append(new Option(key+":"+value, key)).trigger('change');
            });
            <!--jQueryLoadGenerator("#estimatedQpsSelect").select2({-->
          <!--theme: "classic"-->
          <!--});-->
          }

          function displayGraphVersion(version,estimatedQps,updateQpsValues,transport){
            jQueryLoadGenerator.getJSON("responseTimeTrend?jettyVersion="+encodeURI(version), function (json) {
              if(updateQpsValues) {
                var qpsValues= getUnique(json.map(function (d) {return d.estimatedQps;}));
                updateQpsSelect(qpsValues);
                estimatedQps = jQueryLoadGenerator('#estimatedQpsSelect').val();
              }
              if(estimatedQps) {
                json = jQueryLoadGenerator.grep(json, function( n, i ) {
                  return n.estimatedQps == estimatedQps;
                });
              }
              if(transport) {
                json = jQueryLoadGenerator.grep(json, function( n, i ) {
                  return n.transport == transport;
                });
              }
              jQueryLoadGenerator("#load_result_response_time_trend").empty();

              if(version &amp;&amp; (version.indexOf("|")>=0) ) {
                // rework the data
                var data = [];
                var ykeys = [];
                var labels = [];
                jQueryLoadGenerator.each(json, function( index, value ) {
                  var obj = {};
                  obj["startTimeStamp"] = value.startTimeStamp;
                  obj["mean_"+value.jettyVersion] = value.mean;
                  obj["mean"] = value.mean;
                  obj["jettyVersion"]=value.jettyVersion;
                  data.push(obj);
                  var versions = version.split("|");
                  console.log("versions.length"+versions.length);
                  for (var i = 0; i &lt; versions.length; i++) {
                    if(!ykeys.includes("mean_"+versions[i])) {
                      ykeys.push("mean_"+versions[i]);
                      labels.push("Mean "+versions[i]);
                    }
                  }
                });
                var graph = Morris.Line({
                  element: 'load_result_response_time_trend',
                  data: data,
                  xkey: 'startTimeStamp',
                  ykeys: ykeys,
                  labels: labels,
                  resize: true,
                  pointSize: 1,
                  parseTime: false,
                  hideHover: 'auto',
                  dateFormat: function(x) {
                    return x;
                  },
                  xLabelFormat: function(x) {
                    return '';// to verbose and non readable Build #' + x.src.buildId;
                  },
                  hoverCallback: function (index, options, content, row) {
                    return 'jettyVersion: ' + row.jettyVersion + '<br/>'
                    + 'Mean: ' + row.mean + '<br/>'
                    + 'Estimated QPS: ' + row.estimatedQps + '<br/>'
                    + ' Timestamp: ' + row.timestampStr;
                  }
                });

              } else {
                var graph = Morris.Line({
                  element: 'load_result_response_time_trend',
                  data: json,
                  xkey: 'startTimeStamp',
                  ykeys: ['mean','value90'], // ,'maxValue' ,'value50'
                  labels: ['Mean','Value 90'], // , 'Max' ,'Value 50'
                  resize: true,
                  pointSize: 1,
                  parseTime: false,
                  hideHover: 'auto',
                  dateFormat: function(x) {
                    return x;
                  },
                  xLabelFormat: function(x) {
                    return '';// to verbose and non readable Build #' + x.src.buildId;
                  },
                  hoverCallback: function (index, options, content, row) {
                    return 'jettyVersion: ' + row.jettyVersion + '<br/>'
                    + 'Mean: ' + row.mean + '<br/>'
                    + 'Value 90: ' + row.value90 + '<br/>'
                    + 'Estimated QPS: ' + row.estimatedQps + '<br/>'
                    + ' Timestamp: ' + row.timestampStr;
                  }
                });
              }
            });
          }

          <!--jQueryLoadGenerator('#jettyVersions').on('change', function() {-->
            <!--version = jQueryLoadGenerator(this).find(":selected").val();-->
            <!--displayGraphVersion(version,jQueryLoadGenerator('#estimatedQpsSelect').val(),true,jQueryLoadGenerator('#transport').val());-->
          <!--})-->
          jQueryLoadGenerator('#estimatedQpsSelect').on('change', function() {
            estimatedQps = jQueryLoadGenerator(this).find(":selected").val();
            versionsSelected = jQueryLoadGenerator('#jettyVersions').val();//.replace(",","|");
            var versions='';
            jQueryLoadGenerator.each(versionsSelected, function(index,value) {
              versions = versions + value + "|";
            });
            console.log("estimatedQpsSelect :" + estimatedQps + ",versions:" + versions);
            displayGraphVersion(versions,estimatedQps,false,jQueryLoadGenerator('#transport').val());
          })
          jQueryLoadGenerator('#transport').on('change', function() {
            transport = jQueryLoadGenerator(this).find(":selected").val();
            displayGraphVersion(jQueryLoadGenerator('#jettyVersions').val(),jQueryLoadGenerator('#estimatedQpsSelect').val(),false,transport);
          })

          jQueryLoadGenerator('#jettyVersions').on('select2:select', function (e) {
            applyVersionsChanged();
          });

          jQueryLoadGenerator('#jettyVersions').on('select2:unselect', function (e) {
            applyVersionsChanged();
          });

          function applyVersionsChanged() {
            var data = jQueryLoadGenerator('#jettyVersions').select2('data');
            console.log("versions changed");
            if(data.length>1){
              var versions='';
              jQueryLoadGenerator.each(data, function(index,value) {
                versions = versions + value.id + "|";
              });
              displayGraphVersion(versions,jQueryLoadGenerator('#estimatedQpsSelect').val(),true,jQueryLoadGenerator('#transport').val());
            } else {
              displayGraphVersion(data[0].id,jQueryLoadGenerator('#estimatedQpsSelect').val(),true,jQueryLoadGenerator('#transport').val());
            }
          }

          version = jQueryLoadGenerator('#jettyVersions').val();
          displayGraphVersion(version,null,true,'http');

          function getUnique(inputArray) {
            var outputMap = {};
            for (var i = 0; i &lt; inputArray.length; i++) {
              cur = inputArray[i];
              num = outputMap[cur];
              if(num){
                outputMap[cur]=num+1;
              } else {
                outputMap[cur]=1;
              }
            }
            return outputMap;
          }
        </script>
      </div>
    </l:main-panel>
  </l:layout>

</j:jelly>
